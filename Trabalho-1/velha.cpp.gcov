        -:    0:Source:velha.cpp
        -:    0:Graph:velha.gcno
        -:    0:Data:velha.gcda
        -:    0:Runs:2
        -:    1:/**
        -:    2: * \file  velha.cpp
        -:    3: */
        -:    4:
        -:    5:#include "velha.hpp"
        -:    6:#include "math.h"
        -:    7:
        -:    8:/** 
        -:    9: * @brief verifica situacao do jogo da velha  
        -:   10: * @author Manoel Vieira 
        -:   11: * @param  velha Matrix 3x3 com valores entre 0-3
        -:   12: * 
        -:   13: *  Verifica se o jogo recebido tem um ganhador, se é impossível 
        -:   14: */
       21:   15:int VerificaVelha(int velha[3][3])
        -:   16:{
       21:   17:	if (isImpossibleGame(velha))
        -:   18:	{
        4:   19:		return -2;
        -:   20:	}
        -:   21:
       65:   22:	for (auto i = 0; i < 3; i++)
        -:   23:	{
       49:   24:		auto result = VerificaLinha(velha[i]);
       49:   25:		if (result == 1 || result == 2)
        -:   26:		{
        1:   27:			return result;
        -:   28:		}
        -:   29:	}
        -:   30:
       56:   31:	for (auto i = 0; i < 3; i++)
        -:   32:	{
       44:   33:		auto result = VerificaColuna(velha, i);
       44:   34:		if (result == 1 || result == 2)
        -:   35:		{
        4:   36:			return result;
        -:   37:		}
        -:   38:	}
        -:   39:
       32:   40:	for (auto i = 0; i < 2; i++)
        -:   41:	{
       24:   42:		auto result = VerificaDiagonal(velha, static_cast<Direcao>(i));
       24:   43:		if (result == 1 || result == 2)
        -:   44:		{
        4:   45:			return result;
        -:   46:		}
        -:   47:	}
        -:   48:
        8:   49:	return isDraw(velha) ? 0 : -1;
        -:   50:}
        -:   51:
        -:   52:/** 
        -:   53: * @brief verifica se uma linha contém um vencendor 
        -:   54: * @author Manoel Vieira 
        -:   55: * @param  linha vetor de tamanho 3 com valores entre 0-3
        -:   56: * 
        -:   57: * Verifica se todas as ocorrências da linha são iguais, caso verdadeiro
        -:   58: * retorna o valor do elemento repetido (1(x) ou 2(o)), caso falso retorna -1
        -:   59: * (indefinido);
        -:   60: * 
        -:   61: */
      267:   62:int VerificaLinha(int linha[3])
        -:   63:{
      267:   64:	if (!linha[0])
        -:   65:	{
       98:   66:		return -1;
        -:   67:	}
        -:   68:
      275:   69:	for (auto elem = 1; elem < 3; elem++)
        -:   70:	{
      245:   71:		if (linha[elem] != linha[elem - 1])
        -:   72:		{
      139:   73:			return -1;
        -:   74:		}
        -:   75:	}
        -:   76:
       30:   77:	return linha[0];
        -:   78:}
        -:   79:
        -:   80:/** 
        -:   81: * @brief verifica se uma dada coluna contém um vencedor 
        -:   82: * @author Manoel Vieira 
        -:   83: * @param  linha vetor de tamanho 3 com valores entre 0-3
        -:   84: * @param  col coluna a ser verificada
        -:   85: * 
        -:   86: * Extrai a coluna requerida em forma de linha e retorna o resultado
        -:   87: * de VerificaLinha
        -:   88: * 
        -:   89: */
      113:   90:int VerificaColuna(int velha[3][3], int col)
        -:   91:{
      113:   92:	int column[3] = {velha[0][col],
      113:   93:					 velha[1][col],
      113:   94:					 velha[2][col]};
      113:   95:	return VerificaLinha(column);
        -:   96:}
        -:   97:
        -:   98:/** 
        -:   99: * @brief verifica se uma dada diagonal contém um vencedor 
        -:  100: * @author Manoel Vieira 
        -:  101: * @param  linha vetor de tamanho 3 com valores entre 0-3
        -:  102: * @param  dir direção da diagonal (esquerda ou direita)
        -:  103: * 
        -:  104: * Extrai a diagonal requerida em forma de linha e retorna o resultado
        -:  105: * de VerificaLinha
        -:  106: * 
        -:  107: */
       28:  108:int VerificaDiagonal(int velha[3][3], Direcao dir)
        -:  109:{
        -:  110:	int column[3];
       28:  111:	auto i = 0;
        -:  112:
      112:  113:	for (auto j = (dir == esquerda ? 0 : 2); (dir == esquerda ? j < 3 : j >= 0); dir == esquerda ? j++ : j--, i++)
        -:  114:	{
       84:  115:		column[i] = velha[i][j];
        -:  116:	}
        -:  117:
       28:  118:	return VerificaLinha(column);
        -:  119:}
        -:  120:
        -:  121:/** 
        -:  122: * @brief conta as ocorrências de um jogador (X ou O) na matriz 
        -:  123: * @author Manoel Vieira 
        -:  124: * @param  velha matrix 3x3 com valores entre 0-3
        -:  125: * @param  player player a ser contado as ocorrencias
        -:  126: * 
        -:  127: * Visita cada elemento da matriz e retorna a quantidade de ocorrencias
        -:  128: * do jogados player no jogo recebido
        -:  129: * 
        -:  130: */
       62:  131:int countPlays(int velha[3][3], Player player)
        -:  132:{
       62:  133:	auto count = 0;
      248:  134:	for (auto i = 0; i < 3; i++)
        -:  135:	{
      744:  136:		for (auto j = 0; j < 3; j++)
        -:  137:		{
      558:  138:			if (velha[i][j] == static_cast<int>(player))
        -:  139:			{
      199:  140:				count++;
        -:  141:			}
        -:  142:		}
        -:  143:	}
        -:  144:
       62:  145:	return count;
        -:  146:}
        -:  147:
        -:  148:/** 
        -:  149: * @brief verifica se há um empate no jogo (matriz cheia sem vencedor)
        -:  150: * @author Manoel Vieira 
        -:  151: * @param  velha matrix 3x3 com valores entre 0-3
        -:  152: * 
        -:  153: * Caso haja algum elemento vazio na matriz, retorna falso, do contrário, verdadeiro.
        -:  154: * 
        -:  155: */
       12:  156:bool isDraw(int velha[3][3])
        -:  157:{
       26:  158:	for (auto i = 0; i < 3; i++)
        -:  159:	{
       66:  160:		for (auto j = 0; j < 3; j++)
        -:  161:		{
       52:  162:			if (velha[i][j] == 0)
        -:  163:			{
        8:  164:				return false;
        -:  165:			}
        -:  166:		}
        -:  167:	}
        4:  168:	return true;
        -:  169:}
        -:  170:
        -:  171:/** 
        -:  172: * @brief verifica se é um jogo impossível
        -:  173: * @author Manoel Vieira 
        -:  174: * @param  velha matrix 3x3 com valores entre 0-3
        -:  175: * 
        -:  176: * A partir do numero de jogadas de cada jogador um jogo impossível é aquele em 
        -:  177: * que não há um mais de duas ocorrencias a mais de um jogador que do outro
        -:  178: * 
        -:  179: */
       29:  180:bool isImpossibleGame(int velha[3][3])
        -:  181:{
       29:  182:	auto xplays = countPlays(velha, X);
       29:  183:	auto oplays = countPlays(velha, O);
       29:  184:	if (abs(xplays - oplays) > 2)
        -:  185:	{
        6:  186:		return true;
        -:  187:	}
        -:  188:
       23:  189:	auto winnerCounter = 0;
       92:  190:	for (auto linha = 0; linha < 3; linha++)
        -:  191:	{
       69:  192:		if (VerificaLinha(velha[linha]) > 0)
        -:  193:		{
        5:  194:			winnerCounter++;
        -:  195:		}
        -:  196:	}
        -:  197:
       23:  198:	if (winnerCounter > 1)
        -:  199:	{
        2:  200:		return true;
        -:  201:	}
        -:  202:
       84:  203:	for (auto col = 0; col < 3; col++)
        -:  204:	{
       63:  205:		if (VerificaColuna(velha, col) > 0)
        -:  206:		{
        8:  207:			winnerCounter++;
        -:  208:		}
        -:  209:	}
        -:  210:
       21:  211:	if (winnerCounter > 1)
        -:  212:	{
        2:  213:		return true;
        -:  214:	}
        -:  215:
       19:  216:	return false;
        -:  217:}
